[gcode_macro T0]
gcode:
 KTCC_T0 RESTORE_POSITION_TYPE=Z

[gcode_macro T1]
gcode:
 KTCC_T1 RESTORE_POSITION_TYPE=Z

[gcode_macro T2]
gcode:
 KTCC_T2 RESTORE_POSITION_TYPE=Z

[gcode_macro T3]
gcode:
 KTCC_T3 RESTORE_POSITION_TYPE=Z

[gcode_macro UNLOAD_TOOL]
gcode:
    KTCC_TOOL_DROPOFF_ALL     


# Copied from https://github.com/TypQxQ/Klipper_ToolChanger/tree/master/klipper_macros

[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Active temperature(s), optional
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # T= Tool number
  {% if params.T is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.T %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}               # Set heater_active_temp to new parameters.
  {% endif %}

  SET_TOOL_TEMPERATURE{newparameters}


[gcode_macro M106]
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}
  SET_AND_SAVE_FAN_SPEED{newparameters}

[gcode_macro M107]
description: Pnnn
  Turn off fan.
  P = Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0

[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] S<temperature> W<Tolerance>]
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Tnnn Tool number.
  Snnn Temperature
  Wnnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
  {% if params.T is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.T %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.S is defined %}
    {% set newTempParameters = "" %}  # Parameters to be passed to subroutines in new format.
  
    # P= Tool number
    {% if params.T is defined %}
      {% set newTempParameters = newTempParameters ~ " TOOL="~params.T %}                   # Set heater_standby_temp to new parameters.
    {% endif %}
  
    # S= Active temperature
    {% if params.S is defined %}
      {% set newTempParameters = newTempParameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
    {% endif %}
    SET_TOOL_TEMPERATURE{newTempParameters}
  {% endif %}
  {% if params.W is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.W %}                   # Set Tolerance to new parameters.
  {% else %}
    {% set newparameters = newparameters ~ " TOLERANCE=2" %}                             # Set Tolerance to default of 2.
  {% endif %}
  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}

[gcode_macro M116]
description: Pnnn Hnnn Snnn
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Only one of either P or H may be used.
  Pnnn Tool number.
  Hnnn Heater number. 0="heater_bed", 1="extruder", 2="extruder1", etc.
  Snnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.P %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.H is defined %}
    {% set newparameters = newparameters ~ " HEATER=" ~ params.H %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.S %}                   # Set Tool to new parameters.
  {% endif %}
  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}

[gcode_macro M204]
rename_existing: M204.1
description: Snnn / Pnnn Tnnn
  Set acceleration either S or P and T must be provided.
  If P and T provided then will use the lower of the two.
gcode:
  {% if params.S is defined %}
    {% set accel = params.S|float %}
  {% elif params.P is defined or params.T is defined %}
    {% set p = params.P|default(999999)|int %}
    {% set t = params.T|default(999999)|int %}
    {% if p < t %}
      {% set accel = p %}
    {% else %}
      {% set accel = t %}
    {% endif %}
  {% else %}
    { action_raise_error("M204: Must provide S, P or T parameter.") }
  {% endif %}

  SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel*0.5}

[gcode_macro M566]
description: Xnnn Ynnn
  Set Square Corner Velocity in RRF style.
  Only the lower of required X or Y will be used.
gcode:
#  RESPOND MSG="M566: Seting new Square Corner Velocity." #: {rawparams}.
#  { action_respond_info("M566: Seting new Square Corner Velocity: "~rawparams) }

  {% if params.X is defined or params.Y is defined %}
    {% set x = params.X|default(999999)|int %}
    {% set y = params.Y|default(999999)|int %}
    {% if x < y %}
      {% set square_corenr_velocity = x %}
    {% else %}
      {% set square_corenr_velocity = y %}
    {% endif %}
    gcode: SQUARE_CORNER_VELOCITY={square_corenr_velocity/60}
  {% else %}
    { action_raise_error("M566: At least X or Y must be defined.") }
  {% endif %}

[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

#  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}

[gcode_macro KTCC__SET_TOOL_TEMPERATURE]
description: Set tool temperature.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.TOOL is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.TOOL %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.STDB_TMP is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.STDB_TMP %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.ACTV_TMP is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.ACTV_TMP %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.STDB_TIMEOUT is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.STDB_TIMEOUT %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.SHTDWN_TIMEOUT is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.SHTDWN_TIMEOUT %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.CHNG_STATE is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.CHNG_STATE %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

#  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}


[gcode_macro M600]
gcode:
  { action_respond_info("M600: Pausing: "~rawparams) }

  {% set X = params.X|default(50)|float %}
  {% set Y = params.Y|default(0)|float %}
  {% set Z = params.Z|default(10)|float %}
  SAVE_GCODE_STATE NAME=M600_state
  PAUSE
  G91
  G1 E-.8 F2700
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000
  G91
  G1 E-5 F1000
  RESTORE_GCODE_STATE NAME=M600_state
  { action_respond_info("M600: Resuming.") }

[gcode_macro M601]
gcode:
  M600